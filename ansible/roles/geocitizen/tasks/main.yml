---
- name: Install Java
  ansible.builtin.apt:
    update_cache: yes
    name: openjdk-8-jdk
    state: present

- name: Load version vars
  with_first_found:
    - '../vars/versions/{{ maven_version }}.yml'
    - ../vars/versions/default.yml
  ansible.builtin.include_vars: '{{ item }}'

- name: Assert version vars
  ansible.builtin.assert:
    that:
      - "maven_redis_sha256sum not in (None, '')"

- name: Create download directory
  ansible.builtin.file:
    state: directory
    mode: 'u=rwx,go=rx'
    dest: '{{ maven_download_dir }}'

- name: Download Maven
  ansible.builtin.get_url:
    url: '{{ maven_mirror }}/{{ maven_redis_filename }}'
    dest: '{{ maven_download_dir }}/{{ maven_redis_filename }}'
    checksum: 'sha256:{{maven_redis_sha256sum}}'
    force: false
    use_proxy: '{{ maven_use_proxy }}'
    validate_certs: '{{ maven_validate_certs }}'
    timeout: '{{ maven_download_timeout }}'
    mode: 'u=rw,go=r'

- name: Create Maven installation directory
  become: true
  ansible.builtin.file:
    state: directory
    owner: root
    # Use group ID as group name varies by OS (e.g. root/wheel)
    group: '0'
    mode: 'u=rwx,go=rx'
    dest: '{{ maven_install_dir }}'

- name: Install Maven
  become: true
  ansible.builtin.unarchive:
    src: '{{ maven_download_dir }}/{{ maven_redis_filename }}'
    dest: '{{ maven_install_dir }}'
    copy: false
    owner: root
    # Use group ID as group name varies by OS (e.g. root/wheel)
    group: '0'
    mode: 'go-w'
    creates: '{{ maven_install_dir }}/apache-maven-{{ maven_version }}'

- name: Create symbolic links
  ansible.builtin.include_tasks: create-symbolic-links.yml
  when: maven_is_default_installation

- name: Create Ansible facts.d directory
  become: true
  ansible.builtin.file:
    state: directory
    dest: /etc/ansible/facts.d
    owner: root
    # Use group ID as group name varies by OS (e.g. root/wheel)
    group: '0'
    mode: 'u=rwx,go=rx'

- name: Install Maven facts
  become: true
  ansible.builtin.template:
    src: facts.j2
    dest: '/etc/ansible/facts.d/{{ maven_fact_group_name }}.fact'
    owner: root
    # Use group ID as group name varies by OS (e.g. root/wheel)
    group: '0'
    mode: 'u=rw,go=r'

- name: Re-read facts
  ansible.builtin.setup:
    filter: ansible_local

- name: Create Tomcat group
  become: yes
  group:
    name: tomcat
    state: present

- name: Create Tomcat user
  become: yes
  user:
    name: tomcat
    state: present

- name: Download Tomcat
  get_url:
    url: "{{ tomcat_archive_url }}"
    dest: "{{ tomcat_archive_dest }}"

- name: Create a tomcat directory
  file:
    path: /usr/share/tomcat
    state: directory
    owner: tomcat
    group: tomcat

- name: Extract tomcat archive
  unarchive:
    src: "{{ tomcat_archive_dest }}"
    dest: /usr/share/tomcat
    owner: tomcat
    group: tomcat
    remote_src: yes
    extra_opts: "--strip-components=1"
    creates: /usr/share/tomcat/bin

- name: Copy tomcat service file
  template:
    src: templates/tomcat.service.j2
    dest: /etc/systemd/system/tomcat.service
  when: ansible_service_mgr == "systemd"

- name: Start and enable tomcat
  service:
    daemon_reload: yes
    name: tomcat
    state: started
    enabled: yes
    
- name: Download application build using Artifactory API KEY
  shell: curl -H "X-JFrog-Art-Api:{{ jfrog_api_key }}" http://{{ jfrog_host }}:{{ jfrog_port }}/artifactory/{{ jfrog_repo }}/{{ jfrog_env }}-citizen-{{ jfrog_build_number }}-{{ jfrog_hash }}.war -o /usr/share/tomcat/webapps/

- name: Change file ownership
  ansible.builtin.file:
    path: "/usr/share/tomcat/webapps/{{ jfrog_env }}-citizen-{{ jfrog_build_number }}-{{ jfrog_hash }}.war"
    owner: tomcat
    group: tomcat

- name: Restart tomcat service
  service:
    daemon_reload: yes
    name: tomcat
    state: restarted
    enabled: yes