/* groovylint-disable DuplicateStringLiteral, LineLength, NestedBlockDepth */
pipeline {
    agent any
    tools {
        maven 'M3'
        jfrog 'jfrog-cli'
    }
    parameters {
        choice(name: 'ENV', choices: ['dev', 'stage', 'prod'], description: 'Deployment environment')
        choice(name: 'REGION', choices: ['europe', 'us'], description: 'Select the region')
        string(name: 'BUILDNAME', defaultValue: 'citizen', description: 'Build Name')
    }
    environment {
        CREDENTIALS_FILE = credentials('env')
        ENVIRONMENT = "GCP-SA-${params.ENV}"
        //GOOGLE_CREDENTIALS = credentials('${ENVIRONMENT}) //заменить на дев , стейлд и прод
        //CREDENTIALS_FILE = credentials('env')
        
        // Jfrog parameters
        hash = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()
        buildName = "${params.ENV}-${params.BUILDNAME}-$BUILD_NUMBER-${hash}"
        repo = "geocit-${params.ENV}-maven-local"
        // Database Credentials
        //projectId = sh(script: 'gcloud config get-value project', returnStdout: true).trim()
        //secretName = sh(script: "gcloud secrets list --filter='name:prod' --format='value(name)'", returnStdout: true).trim()
        //dbPassword = sh(script: "gcloud secrets versions access latest --secret=${secretName} --project=${projectId}", returnStdout: true).trim()
    }
    stages {
        stage('git checkout') {
                steps {
                    script {
                        git branch: 'main', credentialsId: 'gitcreds', url: 'git@github.com:CapybaraDevOps/geocit.git'
                    }
                }
        }
        stage('Check IP') {
            steps {
                withCredentials([file(credentialsId: "${ENVIRONMENT}", variable: 'GOOGLE_CREDENTIALS')]) {
                      script{
                        // Authenticate using the service account credentials
                            sh 'gcloud auth activate-service-account --key-file=$GOOGLE_CREDENTIALS'
                            def projectId = sh(script: "gcloud projects list --format='table(projectId)' | grep capybara", returnStdout: true).trim() 
                            sh "gcloud config set project ${projectId}"
                            def secretName = sh(script: "gcloud secrets list --filter='name:geo-database-credentials' --format='value(name)'", returnStdout: true).trim()
                            echo "${secretName}"
                            def dbPassword = sh(script: "gcloud secrets versions access latest --secret=${secretName} --project=${projectId}", returnStdout: true).trim()
                            echo "${dbPassword}"
                            postgresIP = sh(script: "gcloud sql instances describe $ENV-01-$REGION-west3-postgres-db  --project=${projectId} --format='value(ipAddresses.ipAddress)'")
                            
                      }
                   /* script {
                        def instanceName = sh(script: "gcloud sql instances list --format=\"value(NAME)\" --project=${env.idProject}", returnStdout: true).trim()
                        def postgresIP = sh(script: "gcloud sql instances describe ${instanceName} --format=json | jq -r '{name: .name, ip: .ipAddresses[0].ipAddress}'", returnStdout: true).trim()
                        def externalIP = sh(script: 'gcloud compute forwarding-rules list --format=json | jq \'.[] | {name: .name, ip: .IPAddress}\'', returnStdout: true).trim()

                        def postgresData = readJSON text: postgresIP
                        def postgresIP = postgresData.ip

                        def externalData = readJSON text: externalIP
                        def externalIP = externalData.ip

                        env.externalIP = externalIPAddress
                        env.postgresIP = postgresIPAddress
                        sh 'echo small fix'
                    }*/
                }
            }
        }
        stage('Configure') {
            steps {
                script {
                    withCredentials([file(credentialsId: 'env', variable: 'CREDENTIALS_FILE')]) {
                        def json = readJSON file: "${CREDENTIALS_FILE}"
                        // def ip = env.externalIP
                        // def ip_db = env.postgresIP
                        //def escapedPassword = sh(script: "printf '%s\n' '${env.passwordBD}' | sed -e 's/[\\/&]/\\\\&/g'", returnStdout: true).trim()
                        appProp = 'src/main/resources/application.properties'
                        app_js = 'src/main/webapp/static/js/app.*.js'
                        sh "sed -i 's|http://localhost:8080|https://capybara.pp.ua|g' $appProp"
                        sh "sed -i 's|localhost:5432|$postgresIP:5432|g' $appProp"
                        sh "sed -i 's|http://localhost:8080|https://capybara.pp.ua|g' $app_js"

                        sh "sed -i 's|^db.username=.*|db.username=${json.db.username}|' ${appProp}"
                        sh "sed -i 's|^db.password=.*|db.password=${dbPassword}|' ${appProp}"

                        sh "sed -i 's|^username=.*|username=${json.username}|' ${appProp}"
                        sh "sed -i 's|^password=.*|password=${dbPassword}|' ${appProp}"

                        sh "sed -i 's|^email.username=.*|email.username=${json.email.username}|' ${appProp}"
                        sh "sed -i 's|^email.password=.*|email.password=${json.email.password}|' ${appProp}"
                        sh "sed -i 's|^map.key=.*|map.key=${json.map.key}|' ${appProp}"
                    }
                }
            }
        }
        stage('Build Back-end') {
            steps {
                sh 'mvn clean package -Dmaven.test.skip=true'
            }
        }
        stage('Test Back-end') {
            steps {
                sh 'mvn test'
            }
        }
        stage('Artifactory') {
            steps {
                script {
                    jf "rt u ${WORKSPACE}/target/citizen.war ${repo}/${buildName}.war"
                    jf 'rt bp'
                }
            }
        }
    }
    post {
        always {
            cleanWs()
        }
    }
}
