pipeline {
    agent any

    stages {
        stage('Checkout') { 
            steps {
                script {
                    final String content = readFile(file: "../../hostadresses")
                    final List hosts = extractLines(content)
                    properties([
                        parameters([
                            string(
                                defaultValue: '10.156.0.48', 
                                name: 'GRAFANA-IP', 
                                trim: true
                            )
                        ])
                    ])
                    git branch: 'jira-51-configure-ansible-for-the-application', url: "git@github.com:CapybaraDevOps/geocit-infrastructure.git", credentialsId: 'gitcreds'
                    for (i = 0; i < hosts.size(); i++) {
                        env.LoopHost = hosts[i]
                        env.CurrentIndex = i
                        sshagent(credentials : ['ansible']) {
                        }
                            sh "ssh -o StrictHostKeyChecking=no ansible@${env.LoopHost}"
                            sh "exit"
                            sh "sed -i -e '/hosts/a ""\t""server$env.CurrentIndex"":\n\t\t""ansible_host"":"" $env.LoopHost' ansible/inventory.yml"
                    }
                    env.GrafanaIp = params.GRAFANA-IP
                    sh "sed -i -e \'s/monitoring_ip/$env.GrafanaIp/g\' ansible/inventory.yml"
                    sh "cat ansible/inventory.yml"
                }
            }
        }
        stage('Deploy') {
            steps {
                dir('ansible/roles') {
                    ansiblePlaybook playbook: 'geocitizen/geocitizen-playbook.yml', inventory: '../inventory.yml', credentialsId: 'ansible'
                }
            }
        }
    }
}

@NonCPS
List extractLines(final String content) {
    List hosts = []
    content.eachLine { line -> 
        hosts << line
    }
    return hosts
}