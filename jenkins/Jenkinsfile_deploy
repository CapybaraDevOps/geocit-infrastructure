pipeline {
    agent any
    environment {
        IP_SERVERS = []
    }
    tools {
        maven "M3"
    }
    stages {
        stage('git clone') {
            steps{
                script {
                    git branch: 'main', credentialsId: 'gitcreds', url: 'git@github.com:CapybaraDevOps/geocit.git'
                }
                emailext (
                    subject: "STARTED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'",
                    body: """<p>STARTED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':</p>
                        <p>Check console output at &QUOT;<a href='${env.BUILD_URL}'>${env.JOB_NAME} [${env.BUILD_NUMBER}]</a>&QUOT;</p>""",
                    recipientProviders: [[$class: 'DevelopersRecipientProvider']]
                )
            }
        }
        stage('Get Output') {
            steps {
                script {
                    def hostAddressesFile = 'hostaddresses'
                    copyArtifacts(
                        projectName: 'infrastructure', 
                        filter: hostAddressesFile, 
                        selector: lastSuccessful()
                    )
                    def content = readFile file: hostAddressesFile
                    env.IP_SERVERS = content.split(",")
                }
            }
        }
        stage('Build Back-end') {
                steps{
                    sh "mvn clean package -Dmaven.test.skip=true"
                }
        }
        stage('Test Back-end') {
                steps{
                    sh "mvn test"
                }
        }
        stage('Deploy') {
            steps {
                script {
                    env.IP_SERVERS.each { ip ->
                        sh "gcloud compute scp /var/lib/jenkins/workspace/Deploy/target/citizen.war username@${ip}:/opt/tomcat/webapps/"
                    }
                }
            }
        }
    }
    post {
        success {
            mail to: 'oleksii.taranyk@gmail.com',
            subject: "Job '${JOB_NAME}' (${BUILD_NUMBER}) is waiting for input",
            body: "Please go to ${BUILD_URL} and verify the build"
        }
        failure {
            emailext (
                subject: "FAILED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'",
                body: """<p>FAILED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':</p>
                    <p>Check console output at &QUOT;<a href='${env.BUILD_URL}'>${env.JOB_NAME} [${env.BUILD_NUMBER}]</a>&QUOT;</p>""",
                recipientProviders: [[$class: 'DevelopersRecipientProvider']]
            )
        }
        always {
            sendNotifications currentBuild.result
            cleanWs()
        }
    }
}
