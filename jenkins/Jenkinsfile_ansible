/* groovylint-disable LineLength, NestedBlockDepth */
pipeline {
    agent any
    parameters {
        choice(name: 'ENV', choices: ['dev', 'stage', 'prod'], description: 'Deployment environment')
        choice(name: 'REGION', choices: ['europe', 'us'], description: 'Select the region')
        choice(name: 'ZONE', choices: ['west3', 'east5'], description: 'Select the zone')
        string(name: 'PROJECT_NAME', defaultValue: 'geo', description: 'Project name')
        string(name: 'JFROG_PORT', defaultValue: '8081', description: 'Jfrog host port')
        string(name: 'JFROG_REPO', defaultValue: 'geocit-dev-maven-local', description: 'Jfrog repository name')
        string(name: 'JFROG_BUILD_NUMBER', defaultValue: '16', description: 'Application build number')
        string(name: 'JFROG_HASH', defaultValue: 'be44ac1', description: 'Application build hash')
    }
    environment {
        //GCP env
        GCP_PROJECT = params.PROJECT_NAME
        GCP_ZONE = params.ZONE
        MONITORING_IP = sh(script: "gcloud compute instances list --format=json | jq '.[] | select(.name|contains(\"monitoring\")) | .networkInterfaces[].networkIP'", returnStdout: true).trim()
        //Jfrog env
        JFROG_HOST = sh(script: "gcloud compute instances list --format=json | jq '.[] | select(.name|contains(\"artifactory\")) | .networkInterfaces[].accessConfigs[].natIP'", returnStdout: true).trim()
        JFROG_ENV = params.ENV
    }
    stages {
        stage('Deploy') {
            steps {
                dir('ansible/roles') {
                    withCredentials([string(credentialsId: 'discord-webhook', variable: 'DISCORD_WEBHOOK_URL')]) {
                        script {
                            // env.DISCORD_WEBHOOK_URL = "${WEBHOOK_URL}"
                        }
                    }
                    withCredentials([string(credentialsId: 'jfrog-api-key', variable: 'JFROG_API_KEY')]) {
                        script {
                            // env.JFROG_API_KEY = "${JFROG_API_KEY}"
                        }
                    }
                    withCredentials([file(credentialsId: 'google_secret_file', variable: 'GCP_SERVICE_ACCOUNT_FILE')]) {
                        script {
                            //Ansible defaults file mapping
                            sh 'envsubst < geocitizen/defaults/main.yml | tee geocitizen/defaults/main_temp.yml'
                            sh 'mv geocitizen/defaults/main_temp.yml geocitizen/defaults/main.yml'
                            //Targets file mapping
                            sh 'envsubst < deploy_promgrafnode/files/prometheus.yml | tee deploy_promgrafnode/files/prometheus_temp.yml'
                            sh 'mv deploy_promgrafnode/files/prometheus_temp.yml deploy_promgrafnode/files/prometheus.yml'
                            //.env mapping
                            sh 'envsubst < deploy_promgrafnode/files/.env | tee deploy_promgrafnode/files/.env_temp'
                            sh 'mv deploy_promgrafnode/files/.env_temp deploy_promgrafnode/files/.env'
                            //Docker Compose mapping
                            sh 'envsubst < deploy_promgrafnode/files/docker-compose-vm2.yml | tee deploy_promgrafnode/files/docker-compose-vm2.yml_temp'
                            sh 'mv deploy_promgrafnode/files/docker-compose-vm2.yml_temp deploy_promgrafnode/files/docker-compose-vm2.yml'
                            //Inventory mapping
                            sh 'envsubst < ../inventory.gcp.yml | tee ../inventory_temp.gcp.yml'
                            sh 'mv ../inventory_temp.gcp.yml ../inventory.gcp.yml'
                        }
                        ansiblePlaybook playbook: '../geocitizen-playbook.yml', inventory: '../inventory.gcp.yml', credentialsId: 'ansible', extras: '--ssh-extra-args="-o StrictHostKeyChecking=no"'
                    }
                }
            }
        }
    }
    post {
        always {
            cleanWs()
        }
    }
}